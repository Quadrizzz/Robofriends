{"version":3,"sources":["Components/Searchbox.js","Components/CardList.js","Components/Scroll.js","Components/ErrorBoundary.js","Containers/App.js","serviceWorker.js","index.js"],"names":["Searchbox","searchfield","searchchange","className","type","placeholder","onChange","CardList","robots","Error","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","HasError","error","info","this","setState","Component","App","onsearchchange","event","target","value","fetch","then","response","json","users","filterrobot","filter","name","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8LAaeA,EAXG,SAAC,GAA+B,EAA9BC,YAA+B,IAAjBC,EAAgB,EAAhBA,aAC9B,OACI,yBAAKC,UAAY,OACb,2BAAOC,KAAO,SAASC,YAAc,iBACrCF,UAAY,iDACZG,SAAYJ,MCUTK,EAdE,SAAC,GAAa,EAAXC,OAEZ,MAAM,IAAIC,MAAM,aCMTC,EATA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,UAAW,SAAUC,OAAS,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCuBJC,E,YAzBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,UAAW,GAHD,E,+EAQAC,EAAQC,GACtBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SAEN,oDAIJG,KAAKX,MAAMK,a,GApBKQ,aCmDbC,E,YA5CX,aAAe,IAAD,8BACV,+CAeJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACtB,YAAa0B,EAAMC,OAAOC,SAfzC,EAAKX,MAAQ,CACTV,OAAS,GACTP,YAAc,IAJR,E,iFASM,IAAD,OACf6B,MAAM,8CAA8CC,MAAK,SAAAC,GACrD,OAAOA,EAASC,UACjBF,MAAK,SAAAG,GAAU,EAAKX,SAAS,CAACf,OAAS0B,S,+BAQnC,IAAD,OACAC,EAAcb,KAAKJ,MAAMV,OAAO4B,QAAQ,SAAA5B,GAC9C,OAAOA,EAAO6B,KAAKC,cAAcC,SAAS,EAAKrB,MAAMjB,YAAYqC,kBAEjE,OAAgC,IAA7BhB,KAAKJ,MAAMV,OAAOgC,OACV,wBAAIrC,UAAU,OAAd,WAIP,yBAAKA,UAAU,MACX,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAYD,aAAgBoB,KAAKI,iBACjC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUlB,OAAU2B,W,GAnC1BM,IAAMjB,WCIJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCPNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.774e0fb0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Searchbox = ({searchfield , searchchange})=>{\r\n    return(\r\n        <div className = \"pa2\">\r\n            <input type = \"search\" placeholder = 'Search Robots ' \r\n            className = \"pa3  ba b--green br2 bg-lightest-blue shadow-5\"\r\n            onChange = {searchchange}\r\n            ></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\nimport Card from './card'\r\n\r\nconst CardList = ({ robots })=>{\r\n    if(true){\r\n        throw new Error(\"Nooooooo\")\r\n    }\r\n    const cardComponent = robots.map( (user , i) => {\r\n        return (  <Card key = {i} id = {robots[i].id} name = {robots[i].name} email = {robots[i].email}/>)}\r\n    )\r\n    return(\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList; ","import React from 'react'\r\n\r\nconst Scroll = (props)=>{\r\n    return(\r\n        <div style = {{overflowY: 'scroll', border : '5px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Scroll","import React, { Component } from 'react'\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            HasError : false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidCatch(error , info){\r\n        this.setState({HasError : true})\r\n    }\r\n    \r\n    render(){\r\n        if(this.state.HasError){\r\n            return(\r\n                <h1>Ooooops,shit happens</h1>\r\n            )\r\n        }\r\n        return(\r\n            this.props.children\r\n        )\r\n        \r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport CardLIst from '../Components/CardList';\r\nimport Scroll from '../Components/Scroll'\r\n// import { robots } from './robot';\r\nimport './index.css'\r\nimport ErrorBoundary from '../Components/ErrorBoundary'\r\n \r\nclass App extends React.Component {\r\n    constructor (){\r\n        super();\r\n        this.state = {\r\n            robots : [] ,\r\n            searchfield : \"\"\r\n        }\r\n\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users').then(response=>{\r\n            return response.json();\r\n        }).then(users => {this.setState({robots : users})})\r\n        \r\n    }\r\n\r\n    onsearchchange = (event)=>{\r\n        this.setState({searchfield: event.target.value});\r\n    }\r\n\r\n    render () {\r\n        const filterrobot = this.state.robots.filter( robots=>{\r\n        return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })\r\n        if(this.state.robots.length === 0){\r\n            return <h1 className='pa3'>Loading</h1>\r\n        }\r\n        else{\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className = 'f2'>RoboFriends</h1>\r\n                <Searchbox  searchchange = {this.onsearchchange}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardLIst robots = {filterrobot}/>\r\n                    </ErrorBoundary> \r\n                </Scroll>\r\n            </div>\r\n        );\r\n        }\r\n    };\r\n}\r\n\r\n\r\nexport default App ;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/Containers/index.css';\n// import Header from './header';\nimport App from '../src/Containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\n\n\nReactDOM.render(<App /> ,document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}